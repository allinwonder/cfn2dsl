#!/usr/bin/env ruby
require_relative '../lib/cfn2dsl'
require 'YAML'

YAML.add_domain_type('', 'Ref') { |type, val| { 'Ref' => val } }

YAML.add_domain_type('', 'GetAtt') do |type, val|
  if val.is_a? String
    val = val.split('.')
  end

  { 'Fn::GetAtt' => val }
end

%w(Join Base64 Sub Split Select ImportValue GetAZs FindInMap And Or If Not).each do |function_name|
  YAML.add_domain_type('', function_name) { |type, val| { "Fn::#{function_name}" => val } }
end

USAGE = "Usage: #{File.basename(__FILE__)} -t|--template file [-o|--output file]"
options = {}
op = OptionParser.new do |opts|
  opts.banner = USAGE
  opts.on('-t', '--template file', 'Template file path') do |v|
    options[:template] = v
  end

  opts.on('-o', '--output [file]', 'Output file path') do |v|
    options[:output] = v
  end

  opts.on_tail('-h', '--help', 'show this message') do |_v|
    puts opts
    exit
  end

  opts.on_tail('-v', '--version', 'show the version') do |_v|
    puts Cfn2dsl::VERSION
    exit
  end
end

op.parse!

unless options[:template]
  puts op
  exit 1
else
  template = IO.read(options[:template])
  cfndsl   = CloudFormation.new(template)
end

if options[:output]
  File.open(options[:output], 'w') do |file|
    file.write(Render.new(cfndsl).cfn_to_cfndsl)
  end
else
  puts Render.new(cfndsl).cfn_to_cfndsl
end

